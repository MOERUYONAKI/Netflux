security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        user_provider_email:
            entity:
                class: App\Entity\User
                property: email

        user_provider_username:
            entity:
                class: App\Entity\User
                property: username
        user_provider:
            chain:
                providers:
                    - user_provider_email
                    - user_provider_username

    firewalls:
        dev:
            pattern:
            security: false
        main:
            lazy: true
            provider: user_provider
            form_login:
                login_path: app_register
                check_path: app_register
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
            logout:
                path: /signout

    access_control:
        - { path: '^/new', roles: 'ROLE_ADMIN' }
        - { path: '^/', roles: 'ROLE_USER' }
        - { path: '^/login', roles: 'PUBLIC_ACCESS' }
        - { path: '^/signin', roles: 'PUBLIC_ACCESS' }
        - { path: '^/signout', roles: 'PUBLIC_ACCESS' }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
